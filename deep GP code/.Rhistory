higdon <- function(x) {
i <- which(x <= 0.6)
x[i] <- 2 * sin(pi * 0.8 * x[i] * 4) + 0.4 * cos(pi * 0.8 * x[i] * 16)
x[-i] <- 2 * x[-i] - 1
return(x)
}
n<-27
x <- seq(0, 1, length = n)
y <- higdon(x)
np <- 100
xp <- seq(0, 1, length = np)
yp <- higdon(xp)
plot(xp, yp, type = "l", col = 4, xlab = "X", ylab = "Y", main = "Higdon function")
points(x, y)
write.csv(x,'./data/x_2.csv')
write.csv(y,'./data/y_2.csv')
read.csv('./data/x_2.csv')
unlist(read.csv('./data/x_2.csv'),use.name = FALSe)
unlist(read.csv('./data/x_2.csv'),use.name = FALSE)
f <- function(x) as.numeric(x > 0.5)
# Training data
x <- seq(0, 1, length = 8)
y <- f(x)
# Testing data
xp <- seq(0, 1, length = 100)
yp <- f(xp)
plot(xp, yp, type = "l", col = 4, xlab = "X", ylab = "Y", main = "Step function")
points(x, y)
f <- function(x) as.numeric(x > 0.5)
# Training data
x <- seq(0, 1, length = 27)
y <- f(x)
# Testing data
xp <- seq(0, 1, length = 100)
yp <- f(xp)
plot(xp, yp, type = "l", col = 4, xlab = "X", ylab = "Y", main = "Step function")
points(x, y)
write.csv(x,'./data/x_3.csv')
write.csv(y,'./data/y_3.csv')
x <- seq(0, 1, length = n)
y <- higdon(x)
np <- 100
xp <- seq(0, 1, length = np)
yp <- higdon(xp)
plot(xp, yp, type = "l", col = 4, xlab = "X", ylab = "Y", main = "Higdon function")
points(x, y)
x <- seq(0, 1, length = n)
y <- higdon(x)
np <- 1000
xp <- seq(0, 1, length = np)
yp <- higdon(xp)
plot(xp, yp, type = "l", col = 4, xlab = "X", ylab = "Y", main = "Higdon function")
points(x, y)
write.csv(xp,'./data/x_2_2.csv')
write.csv(yp,'./data/y_2_2.csv')
f <- function(x) as.numeric(x > 0.5)
# Training data
x <- seq(0, 1, length = 27)
y <- f(x)
# Testing data
xp <- seq(0, 1, length = 1000)
yp <- f(xp)
plot(xp, yp, type = "l", col = 4, xlab = "X", ylab = "Y", main = "Step function")
points(x, y)
write.csv(xp,'./data/x_3_2.csv')
write.csv(yp,'./data/y_3_2.csv')
```{r}
```{r}
```{r}
```{r}
```{r}
```{r}
x
higdon <- function(x) {
i <- which(x <= 0.6)
x[i] <- 2 * sin(pi * 0.8 * x[i] * 4) + 0.4 * cos(pi * 0.8 * x[i] * 16)
x[-i] <- 2 * x[-i] - 1
return(x)
}
n<-27
x <- seq(0, 1, length = n)
y <- higdon(x)
np <- 1000
xp <- seq(0, 1, length = np)
yp <- higdon(xp)
plot(xp, yp, type = "l", col = 4, xlab = "X", ylab = "Y", main = "Higdon function")
points(x, y)
higdon(x)
library(deepgp)
fit1 <- fit_one_layer(x, y, nmcmc = 10000, verb = FALSE)
plot(fit1)
fit1 <- predict(fit1, xp, lite = FALSE)
```{r}
x <- seq(0, 1, length = n)
y <- higdon(x)
np <- 100
xp <- seq(0, 1, length = np)
yp <- higdon(xp)
plot(xp, yp, type = "l", col = 4, xlab = "X", ylab = "Y", main = "Higdon function")
points(x, y)
fit1 <- predict(fit1, xp, lite = FALSE)
plot(fit1)
fit2 <- fit_two_layer(x, y, nmcmc = 8000, verb = FALSE)
plot(fit2)
fit2 <- continue(fit2, 2000, verb = FALSE)
plot(fit2, trace = FALSE, hidden = TRUE)
fit3 <- fit_three_layer(x, y, nmcmc = 10000, verb = FALSE)
fit3 <- trim(fit3, 5000, 2)
fit3 <- predict(fit3, xp, lite = FALSE)
plot(fit3)
f <- function(x) as.numeric(x > 0.5)
# Training data
x <- seq(0, 1, length = 27)
y <- f(x)
# Testing data
xp <- seq(0, 1, length = 1000)
yp <- f(xp)
plot(xp, yp, type = "l", col = 4, xlab = "X", ylab = "Y", main = "Step function")
points(x, y)
f <- function(x) as.numeric(x > 0.5)
# Training data
x <- seq(0, 1, length = 27)
y <- f(x)
# Testing data
xp <- seq(0, 1, length = 100)
yp <- f(xp)
plot(xp, yp, type = "l", col = 4, xlab = "X", ylab = "Y", main = "Step function")
points(x, y)
fit1 <- fit_one_layer(x, y, nmcmc = 10000, cov = "exp2", true_g = 1e-4, verb = FALSE)
fit1 <- trim(fit1, 5000, 5)
fit1 <- predict(fit1, xp)
plot(fit1)
fit2 <- fit_two_layer(x, y, nmcmc = 10000, cov = "exp2", true_g = 1e-4, verb = FALSE)
fit2 <- trim(fit2, 5000, 5)
fit2 <- predict(fit2, xp)
plot(fit2)
imse1 <- IMSE(fit1, xp)
imse2 <- IMSE(fit2, xp)
par(mfrow = c(1, 2))
plot(xp, imse1$value, type = "l", ylab = "IMSE", main = "One-layer")
points(xp[which.min(imse1$value)], min(imse1$value), pch = 17, cex = 1.5, col = 4)
plot(xp, imse2$value, type = "l", ylab = "IMSE", main = "Two-layer")
points(xp[which.min(imse2$value)], min(imse2$value), pch = 17, cex = 1.5, col = 4)
x <- read.csv('./data/x_1.csv')
x <- unlist(x, use.name = FALSE)
y <- read.csv('./data/y_1.csv')
y <- unlist(y, use.name = FALSE)
x
fit1 <- fit_one_layer(x, y, nmcmc = 10000, verb = FALSE)
plot(fit1)
fit1 <- predict(fit1, xp, lite = FALSE)
plot(fit1)
fit1 <- fit_one_layer(x, y, nmcmc = 100000, verb = FALSE)
plot(fit1)
fit1 <- predict(fit1, xp, lite = FALSE)
plot(fit1)
fit1 <- predict(fit1, x, lite = FALSE)
fit1 <- fit_one_layer(x, y, nmcmc = 100000, verb = FALSE)
fit1 <- fit_one_layer(x, y, nmcmc = 10000, verb = FALSE)
plot(fit1)
fit1 <- predict(fit1, x, lite = FALSE)
plot(fit1)
fit2 <- fit_two_layer(x, y, nmcmc = 8000, verb = FALSE)
plot(fit2)
fit3 <- fit_three_layer(x, y, nmcmc = 10000, verb = FALSE)
fit3 <- fit_three_layer(x, y, nmcmc = 10000, verb = FALSE)
fit3 <- trim(fit3, 5000, 2)
fit3 <- predict(fit3, x, lite = FALSE)
plot(fit3)
x <- read.csv('./data/x_2_2.csv')
x <- unlist(x, use.name = FALSE)
y <- read.csv('./data/y_2_2.csv')
y <- unlist(y, use.name = FALSE)
fit3 <- fit_three_layer(x, y, nmcmc = 10000, verb = FALSE)
x <- read.csv('./data/x_1.csv')
x <- unlist(x, use.name = FALSE)
y <- read.csv('./data/y_1.csv')
y <- unlist(y, use.name = FALSE)
fit1 <- predict(fit1, x, lite = FALSE)
plot(fit1)
fit1 <- fit_one_layer(x, y, nmcmc = 10000, verb = FALSE)
plot(fit1)
fit1 <- predict(fit1, x, lite = FALSE)
plot(fit1)
fit2 <- fit_two_layer(x, y, nmcmc = 8000, verb = FALSE)
plot(fit2)
fit2 <- continue(fit2, 2000, verb = FALSE)
plot(fit2, trace = FALSE, hidden = TRUE)
fit2 <- fit_two_layer(x, y, nmcmc = 8000, verb = FALSE)
plot(fit2)
fit2 <- fit_two_layer(x, y, nmcmc = 8000, verb = FALSE)
fit2 <- predict(fit2)
fit2 <- fit_two_layer(x, y, nmcmc = 8000, verb = FALSE)
fit2 <- predict(fit2, x, lite = FALSE)
plot(fit2)
fit2 <- fit_three_layer(x, y, nmcmc = 8000, verb = FALSE)
fit2 <- predict(fit2, x, lite = FALSE)
plot(fit2)
fit2 <- fit_three_layer(x, y, nmcmc = 8000, verb = FALSE)
fit2 <- predict(fit2, x, lite = FALSE)
plot(fit2)
